//Time complexity : O(n)
#include <bits/stdc++.h>
using namespace std;

struct Node 
{
    int data;
    struct Node *left,*right;
};

Node *newNode(int data)
{
    Node *t = new Node;
    t -> data = data;
    t -> left = t -> right = NULL;
    return t;
}

//vd - vertical distance
void dsutil(Node *root,int vd,map<int,int> &ds)
{
    if(!root) return;
    
    ds[vd] += root->data;
    
    //increase vd for left
    dsutil(root->left,vd+1,ds);
 
    // constant vd for right    
    dsutil(root->right,vd,ds);
}

void diagonalSum(Node *root)
{
 map<int,int> ds;
 
 dsutil(root,0,ds);
 
 map<int,int>::iterator it;
 
 for(it=ds.begin();it!=ds.end();it++)
 printf("%d ",it->second);
}

int main()
{
    struct Node* root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(9); 
    root->left->right = newNode(6); 
    root->right->left = newNode(4); 
    root->right->right = newNode(5); 
    root->right->left->right = newNode(7); 
    root->right->left->left = newNode(12); 
    root->left->right->left = newNode(11); 
    root->left->left->right = newNode(10);

   diagonalSum(root);
   
    return 0;
}
