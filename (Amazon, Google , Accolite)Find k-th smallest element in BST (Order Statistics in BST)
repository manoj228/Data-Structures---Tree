
#include <bits/stdc++.h>
using namespace std;

struct node
{
    int data,count;
    struct node *left,*right;
};

struct node *insert(struct node *root,struct node *t)
{
    node *p = root,*cur = root;
    
    while(p)
    {
        cur = p ;
        if(t -> data < p -> data)
        {
            p -> count++;
            p = p -> left;
        }
        else
        p = p-> right;
    }
    
    if(!root)
    root = t;
    else if(t->data < cur -> data)
    cur -> left = t;
    else 
    cur -> right = t;
    
    return root;
}

struct node *bst(struct node *root,int a[],int n)
{
   struct node *t = NULL;
   for(int i=0 ; i<n ; i++)
   {
       t = new node;
       t -> data = a[i];
       t -> count = 0;
       t -> left = t -> right = NULL;
       
       root = insert(root,t);
   }
   return root;
}

void inorder(struct node *a)
{
    if(a->left) inorder(a->left);
    printf("%d ",a->data);
    if(a->right) inorder(a->right);
}

int k_smallest_element(struct node *root,int k)
{
    int res = -1;
    
    if(root)
    {
        node *p = root;
        while(p)
        {
            if( (p -> count + 1) == k)
            {
                res = p -> data;
                break;
            }
            else if(k > p -> count)
            {
                k -= p -> count + 1;
                p = p->right;
            }
            else
            p = p-> left;
        }
    }
    
    return res;
}

int main()
{
    int a[] = { 20, 8, 22, 4, 12, 10, 14 }; 
    int n=sizeof(a)/sizeof(a[0]);
    struct node *root = NULL;
    
    root = bst(root,a,n);
    
    inorder(root);
    
    for(int i = 1; i <= n ; i++) 
    { 
        printf("\n kth smallest element for k = %d is %d", 
                          i, k_smallest_element(root, i)); 
    } 
    return 0;
}
