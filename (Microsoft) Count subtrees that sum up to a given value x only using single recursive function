//Time complexity : O(n)
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *left,*right;
};

struct Node *getNode(int data)
{
    Node *t = new Node;
    t->data = data;
    t->left = t->right = NULL;
    return t;
}

int countsubtreesum(Node *a,int x)
{
    static int count =0;
    static Node *p = a;
    int ls=0, rs=0;
    
    if(!a) 
    return 0;
    
    ls = countsubtreesum(a->left,x);
    rs = countsubtreesum(a->right,x);
    
    if(ls + rs + a->data == x) {
    count++;
    }
    
    if(p != a)
    return ls + a->data + rs;
    else
    return count;
}

int main()
{
    Node* root = getNode(5); 
    root->left = getNode(-10); 
    root->right = getNode(3); 
    root->left->left = getNode(9); 
    root->left->right = getNode(8); 
    root->right->left = getNode(-4); 
    root->right->right = getNode(7); 
    int x=7;
    
    printf("%d ",countsubtreesum(root,x));
    
    return 0;
}
