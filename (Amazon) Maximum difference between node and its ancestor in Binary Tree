// Time complexity : O(n)
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *left,*right;
};

Node *newNode(int data)
{
    Node *t = new Node;
    t->data = data;
    t->left = t->right = NULL;
    return t;
}

int util(Node *a,int *res)
{
    if(!a) return INT_MAX;
    
    if(!a->left && !a->right) return a->data;
    
    //recursively call for minimum value in left and right subtree
    int val = min(util(a->left,res),util(a->right,res));
    
    *res = max(*res,a->data - val);
    
    return min(val,a->data);
}

int maxdiff(Node *root)
{
    int res = INT_MIN;
    
    util(root,&res);
    
    return res;
}
int main()
{
    Node* root; 
    root = newNode(8); 
    root->left = newNode(3); 
    root->left->left = newNode(1); 
    root->left->right = newNode(6); 
    root->left->right->left = newNode(4); 
    root->left->right->right = newNode(7); 
    root->right = newNode(10); 
    root->right->right = newNode(14); 
    root->right->right->left = newNode(13); 

   printf("%d ",maxdiff(root));
    return 0;
}
