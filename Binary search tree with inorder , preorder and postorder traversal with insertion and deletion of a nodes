
#include <stdio.h>
#include <stdlib.h>

struct node
{
  int data;
  struct node *left , *right ;
};

struct node *root = NULL;

void insert(int d)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    
    temp -> data = d;
    temp -> left = NULL ;
    temp -> right = NULL;
    
    if(root == NULL)
    {
        root = temp;
    }
    else
    {
        struct node *parent = root , *curr = root;
        while(curr)
        {
            parent = curr;
            if(temp->data > curr->data)
            curr = curr -> right;
            else
            curr = curr -> left;
        }
    
      if(parent -> data < temp->data)
      parent -> right = temp;
      else
      parent -> left = temp;
    }
}

void delete(int data)
{
    struct node *parent = root , *curr = root,*t1,*t2;
    
    while(curr -> data != data)
    {
        parent = curr;
        
        if(data > curr -> data)
        curr = curr -> right;
        
        else
        curr = curr -> left;
    }
    
    
    // node having no children 
  if(curr -> left == NULL && curr -> right == NULL && curr == parent -> left)
  {
      
      parent -> left = NULL;
      
      free(curr);
  }
  
  else if(curr -> left == NULL && curr -> right == NULL && curr == parent -> right)
  {
      parent -> right = NULL ;
      
      free(curr);
  }
  
  // node having one children
  else if(curr -> left != NULL && parent -> right == curr)
  {
      parent -> right= curr -> left;
      
      curr -> left = NULL;
      
      free(curr);
  }
  
  else if(curr -> left != NULL && parent -> left == curr)
  {
      parent -> left = curr -> left;
      
      curr -> left = NULL;
      
      free(curr);
  }
  
  else if(curr -> right != NULL && parent -> right == curr)
  {
      parent -> right= curr -> right;
      
      curr -> right = NULL;
      
      free(curr);
  }
  
  else if(curr -> right != NULL && parent -> left == curr)
  {
      parent -> left = curr -> right;
      
      curr -> right = NULL;
      
      free(curr);
  }
  
  // node having two children by choosing least of right subtree or highest of left subtree
  else if(curr -> left != NULL && curr -> right != NULL )
  {
      t1=curr->right;
      
      while(t1)
      {
          t2=t1;
          if(data > t1->data )
          t1 = t1->left;
      }
      printf("%d",t1->data);
  }
}

void inorder(struct node *t)
{
    if(t->left)
     inorder(t->left);
    
    printf("%d ",t->data);
    
    if(t -> right)
    inorder(t->right);
}


void preorder(struct node *t)
{
    printf("%d ",t->data);
    
    if(t->left)
    preorder(t->left);
    
    if(t->right)
    preorder(t->right);
}

void postorder(struct node *t)
{
    if(t->left)
    postorder(t->left);
    
    if(t->right)
    postorder(t->right);
    
    printf("%d ",t->data);
}
int main()
{
    int ch;
    while(1)
    {
        printf("\nBinary Search Tree Operations");
        printf("\n1) Insert");
        printf("\n2) Delete");
        printf("\n3) Inorder");
        printf("\n4) Preorder");
        printf("\n5) Postorder");
        printf("\n6) Exit");
        printf("\nEnter your choice");
        scanf("%d",&ch);
        
        switch(ch)
        {
            case 1 : 
            insert(50);
            insert(30);
            insert(70);
            insert(20);
            insert(40);
            insert(60);
            insert(80);
            break;
            
            case 2: delete(70);
            break;
            
            case 3: inorder(root);
            break;
            
            case 4: preorder(root);
            break;
            
            case 5: postorder(root);
            break;
            
            case 6: exit(1);
        }
    }

    return 0;
}
