//Time complexity : O(n)
#include <bits/stdc++.h>
using namespace std;

struct lnode
{
    int data;
    struct lnode *link;
};

struct tnode
{
    int data;
    struct tnode *left,*right;
};

void push(struct lnode **temp,int data)
{
    struct lnode *t=new lnode;
    t->data=data;
    t->link=(*temp);
    (*temp)=t;
}

void inorder(struct tnode *t)
{
    if(t->left) inorder(t->left);
    
    printf("%d ",t->data);
    
    if(t->right) inorder(t->right);
}

struct tnode* newtree(int data)
{
    struct tnode *t = (struct tnode *)malloc(sizeof(struct tnode));
    t->data = data;
    t->left = t->right = NULL;
    
    return t;
}
void convertlist2Binary(struct lnode *head,struct tnode* &t)
{
    queue<tnode *> q;
    
    if(head == NULL) 
    { 
        t = NULL; return;
    }
    
    t =newtree(head->data);
    q.push(t);
    head = head->link;
    
    while(head)
    {
        struct tnode *parent = q.front(); 
        q.pop();
        
        struct tnode *leftchild = NULL , *rightchild = NULL;
        leftchild = newtree(head->data);
        q.push(leftchild);
        head = head -> link;
        
        if(head)
        {
            rightchild = newtree(head->data);
            q.push(rightchild);
            head = head -> link;
        }
        
        parent -> left = leftchild;
        parent -> right = rightchild;
    }
    
}

int main()
{
    struct lnode* head = NULL; 
    push(&head, 36);  
    push(&head, 30); 
    push(&head, 25); 
    push(&head, 15); 
    push(&head, 12); 
    push(&head, 10);
  
  struct tnode *tree;
  
  convertlist2Binary(head,tree);
  
  inorder(tree);
    return 0;
}
