
#include<bits/stdc++.h> 
using namespace std; 

struct Node 
{ 
	int data; 
	struct Node* left, *right; 
}; 


struct Node *newNode(int item) 
{ 
	struct Node *temp = new Node; 
	temp->data = item; 
	temp->left = temp->right = NULL; 
	return temp; 
} 

struct Node* insert(struct Node* node, int key) 
{ 
  if(node == NULL) return newNode(key);
  
  if(key < node -> data)
  node -> left = insert(node->left,key);
  else if(key > node -> data)
  node -> right = insert(node->right,key);
  
  return node;
} 

void inorder(struct Node *a)
{
    if(a!=NULL)
    {
        inorder(a->left);
        printf("%d ",a->data);
        inorder(a->right);
    }
    
}

int countNodes(struct Node *a)
{
    int count = 0;
    
    if(!a) return count;
   
    Node *curr = a , *predec;
    
    while(curr)
    {
        if(!curr->left)
        {
            count++;
            curr = curr->right;
        }
        else
        {
            predec = curr->left;
            
            //inorder of predecessor of current
            while(predec -> right && predec -> right != curr)
            predec = predec -> right;
            
            if(!predec -> right)
            {
                predec -> right = curr ;
                curr = curr -> left ;
            }
            //to restore original tree
            else
            {
                predec -> right = NULL;
                
                count++;
                curr = curr->right;
            }
            
        } 
        
    }
    
    return count;
}

int findMedian(struct Node *a)
{
    if(!a) return 0;
    
    int count = countNodes(a) , currcount = 0 ;
    Node *curr = a , *pre , *prev;
    
    while(curr)
    {
        if(!curr->left)
        {
            currcount++;
            
            //odd case
            if(count%2 != 0 && currcount == (count+1)/2)
            return prev -> data;
            
            //even case
            else if(count%2 == 0 && currcount == (count/2)+1)
            return (prev -> data + curr->data) / 2;
            
            prev = curr;
            
            curr = curr-> right;
        }
        else
        {
            pre = curr->left;
            
            while(pre -> right && pre -> right != curr)
            pre = pre -> right;
            
            if(!pre->right)
            {
                pre->right = curr ;
                curr = curr -> left;
            }
            else
            {
                pre -> right = NULL;
                
                prev = pre;
                
                currcount++;
                
                //odd case
            if(count%2 != 0 && currcount == (count+1)/2)
            return curr -> data;
            
            //even case
            else if(count%2 == 0 && currcount == (count/2)+1)
            return (prev -> data + curr->data) / 2;
            
            prev = curr;
            
            curr = curr-> right;
                
            }
        }
    }
    
}
int main() 
{ 

	struct Node *root = NULL; 
	root = insert(root, 50); 
	insert(root, 30); 
	insert(root, 20); 
	insert(root, 40); 
	insert(root, 70); 
	insert(root, 60); 
	insert(root, 80); 

  //  inorder(root);
    
    printf("%d ",findMedian(root));
    
	return 0; 
} 
