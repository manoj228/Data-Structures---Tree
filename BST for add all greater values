#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *left , *right ;
};

struct node *root = NULL;

void insert(int k)
{
    struct node *temp;
    temp = (struct node *) malloc(sizeof(struct node));
    
    temp -> data = k;
    temp -> left = NULL;
    temp -> right = NULL;
    
    if(root == NULL)
     root = temp ;
     
     else
     {
         struct node *p=root,*curr=root;
         
         while(curr)
         {
             p = curr ;
             if(temp -> data > curr -> data)
             curr = curr -> right ;
             else 
             curr = curr -> left ;
         }
         
         if( temp->data > p->data)
         p -> right = temp;
         else
         p -> left = temp;
     }
    
}

void delete(int data)
{
    struct node *p = root, *curr = root;
    
    while(curr -> data != data)
    {
        p=curr;
        
        if(data > curr-> data)
        curr = curr -> right;
        else 
        curr = curr -> left;
    }
    
    if(curr == p->right)
    {
    p->right = NULL;
    free(curr);
    }
    
    else if(curr == p->left)
    {
    p->left = NULL ;
    free(curr);
    }
    
    else if(curr -> left != NULL)
    {
        if(curr == p->right)
            p->right = curr->left;

      curr -> left = NULL;
           
         free(curr);
    }
    else if(curr->right != NULL)
    {
        if(curr == p->right)
        p->right = curr->right;
        
        curr -> right = NULL;
        
        free(curr);
    }
    
    else if(curr->right != NULL)
    {
        if(curr == p->left)
        p->left = curr->right;
        curr -> right = NULL;
        free(curr);
    }
    
    else if(curr -> left != NULL)
    {
         if(curr == p->left)
         p->left = curr -> left;
         
         curr -> left = NULL;
         
         free(curr);
         
    }
}

void inorder(struct node *t)
{
    if(t->left)
    {
    inorder(t->left);
    }
    
    printf("%d ",t->data);
   
    if(t->right)
    inorder(t->right);
}

void preorder(struct node *t)
{
    printf("%d ",t->data);
    
    if(t->left)
    preorder(t->left);
    
     if(t->right)
    preorder(t->right);
}

void postorder(struct node *t)
{
    if(t->left)
    postorder(t->left);
    
    if(t->right)
    postorder(t->right);
    
    printf("%d ", t->data);
   
}

void modified(struct node *t,int *s)
{
    if(t->right)
    {
    modified(t->right,s);
    }
    
    *s += t -> data;
    t -> data = *s ;
   
    if(t->left)
    {
    modified(t->left,s);
    }
}

int main()
{
    
  int ch,s=0;
  while(1)
  {
      printf("\n1) Insert");
      printf("\n2) Inorder Traversal");
      printf("\n3) Delete");
      printf("\n4) Preorder Traversal");
      printf("\n5) PostOrder Traversal");
      printf("\n6) Modified Values (Inorder Traversal Method)");
      printf("\n7) Exit");
      printf("\nEnter your choice");
      scanf("%d",&ch);
      
      switch(ch)
      {
          case 1 : 
          insert(50);
          insert(30);
          insert(70);
          insert(20);
          insert(40);
          insert(60);
          insert(80);
          break;
          
          case 2 : inorder(root);
          break;
          
          case 3 : delete(60);
          break;
          
          case 4 : preorder(root);
          break;
          
          case 5 : postorder(root);
          break;
          
          case 6: modified(root,&s);
          break;
          
          case 7: exit (1);
      }
  }
  

    return 0;
}

